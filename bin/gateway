#!/usr/bin/env node


var program = require('commander');

program
  .version('0.0.1')
  .option('-i, --issuer', 'specify an issuer other than the cold wallet');

program
  .command('postgres:set <url>')
  .description('set the url of the postgres database')
  .action(function(){
    console.log('set the postgres url');
  });

program
  .command('postgres:get')
  .description('get the url of the postgres database')
  .action(function(cmd){
    console.log('get the ripple rest api url');
  });

program
  .command('ripple:set <url>')
  .description('set the url of the ripple rest api')
  .action(function(){
    console.log('set the ripple rest api url');
  });

program
  .command('ripple:get')
  .description('get the url of the ripple rest api')
  .action(function(cmd){
    console.log('get the ripple rest api url');
  });

program
  .command('wallet:set <type> <account> <secret>')
  .description('set the gateway hot wallet')
  .action(function(account, secret){
    console.log('set the hot wallet');
  });

program
  .command('wallet:get')
  .description('get the gateway hot wallet')
  .action(function(){
    console.log('get the hot wallet');
  });

program
  .command('wallet:generate')
  .description('generate a random ripple wallet')
  .action(function(account, secret){
    console.log('generate a random ripple wallet');
  });

program
  .command('username:set <username>')
  .description('set the admin username')
  .action(function(account, secret){
    console.log('set the admin username');
  });

program
  .command('username:get')
  .description('get the admin username')
  .action(function(account, secret){
    console.log('get the admin username');
  });

program
  .command('password:set <password>')
  .description('set the admin password')
  .action(function(account, secret){
    console.log('set the admin password');
  });

program
  .command('password:get')
  .description('get the admin password')
  .action(function(account, secret){
    console.log('get the admin password');
  });

program
  .command('withdrawals:get')
  .description('get pending withdrawals to external accounts')
  .action(function(account, secret){
    console.log('get pending withdrawals');
  });

program
  .command('withdrawals:clear <external_transaction_id>')
  .description('clear pending withdrawal to external account')
  .action(function(account, secret){
    console.log('clear a pending withdrawal');
  });

program
  .command('deposit <external_account_id> <amount> <currency>')
  .description('deposit from an external account')
  .action(function(account, secret){
    console.log('deposit from an external account');
  });

program
  .command('currencies:add <currency> --issuer');
  .description('add support for a currency') 
  .action(function(account, secret){
    console.log('add support for a currency');
  });

program
  .command('currencies:remove <currency> --issuer');
  .description('remove support for a currency')
  .action(function(account, secret){
    console.log('add a curreny');
  });

program
  .command('currencies:get')
  .description('list currencies supported by the gateway')
  .action(function(account, secret){
    console.log('list all currencies supported');
  });

program
  .parse(process.argv);

