#!/usr/bin/env node
var program = require('commander');
var RippleWallet = require('../lib/rippleAddress').RippleWallet;
var GatewayClient = require('../lib/ripple').Gateway.Client;
var User = require('../app/models/user.js');
var crypto = require('crypto');
var nconf = require('../config/nconf.js');

var client = new GatewayClient({
  api: 'http://localhost:4000',
  clientId: 'admin',
  clientSecret: 'theApiKey'
});

program
  .version('0.0.1')
  .option('-i, --issuer', 'specify an issuer other than the cold wallet')
  .option('-e, --env', 'specify the environment');

program
  .command('postgres:set <url>')
  .description('set the url of the postgres database')
  .action(function(url){
    nconf.set('DATABASE_URL', url);
    nconf.save(function (err) {
      console.log('set DATABASE_URL to:');
      console.log(nconf.get('DATABASE_URL'));
    });
  });

program
  .command('postgres:get')
  .description('get the url of the postgres database')
  .action(function(cmd){
    console.log(nconf.get('DATABASE_URL'));
  });

program
  .command('ripple:rest:set <url>')
  .description('set the url of the ripple rest api')
  .action(function(url){
    nconf.set('RIPPLE_REST_API', url);
    nconf.save(function(err) {
      console.log('set the ripple rest api url');
      console.log(nconf.get('RIPPLE_REST_API'));
    });
  });

program
  .command('ripple:rest:get')
  .description('get the url of the ripple rest api')
  .action(function(cmd){
    console.log(nconf.get('RIPPLE_REST_API'));
  });

program
  .command('wallet:set:hot <account> <secret>')
  .description('set the gateway hot wallet')
  .action(function(account, secret){
    console.log('set the hot wallet');
  });

program
  .command('wallet:set:cold <type> <account> <secret>')
  .description('set the gateway hot wallet')
  .action(function(account, secret){
    console.log('set the hot wallet');
  });

program
  .command('wallet:get:hot')
  .description('get the gateway hot wallet')
  .action(function(){
    client.getSettings(function(err, settings) {
      console.log(settings);
    });
  });

program
  .command('wallet:get:cold')
  .description('get the gateway cold wallet')
  .action(function(){
    console.log('get the hot wallet');
  });

program
  .command('wallet:generate')
  .description('generate a random ripple wallet')
  .action(function(account, secret){
    console.log(RippleWallet.generate());
  });

program
  .command('key:set')
  .description('set the admin api key')
  .action(function(account, secret){
    var password = crypto.randomBytes(32).toString('hex');
    nconf.set('KEY', password);
    nconf.save(function(err){
      console.log(nconf.get('KEY'));
    });
  });

program
  .command('key:get')
  .description('get the admin api key')
  .action(function(account, secret){
    var key = nconf.get('KEY');
    if (typeof key == 'undefined') {
      key = crypto.randomBytes(32).toString('hex');
      nconf.set('KEY', key);
      nconf.save(function(err) {
        console.log(nconf.get('KEY'));
      })
    } else {
      console.log(nconf.get('KEY'));
    }
  });

program
  .command('key:generate')
  .description('get the admin password')
  .action(function(account, secret){
    var password = crypto.randomBytes(32).toString('hex');
    console.log(password);
  });

program
  .command('withdrawals:get')
  .description('get pending withdrawals to external accounts')
  .action(function(account, secret){
    console.log('get pending withdrawals');
  });

program
  .command('withdrawals:clear <external_transaction_id>')
  .description('clear pending withdrawal to external account')
  .action(function(account, secret){
    console.log('clear a pending withdrawal');
  });

program
  .command('deposit <external_account_id> <amount> <currency>')
  .description('deposit from an external account')
  .action(function(account, secret){
    console.log('deposit from an external account');
  });

program
  .command('currencies:add <currency> --issuer')
  .description('add support for a currency') 
  .action(function(account, secret){
    console.log('add support for a currency');
  });

program
  .command('currencies:remove <currency> --issuer')
  .description('remove support for a currency')
  .action(function(account, secret){
    console.log('add a curreny');
  });

program
  .command('currencies:get')
  .description('list currencies supported by the gateway')
  .action(function(account, secret){
    console.log('list all currencies supported');
  });

program
  .command('start')
  .description('start the gateway api server')
  .action(function(account, secret){
    console.log('start the gateway api server');
  });

program
  .command('init')
  .description('configure the gateway with initial parameters')
  .action(function(account, secret){
    console.log('create an admin user, set password');
    User.createAdmin(function(err, adminConfig){
      console.log('admin user created with KEY', adminConfig.password);
      console.log('hot and cold wallets have been generated: ');
      console.log(adminConfig.wallets);
    });
  });

program
  .command('stop')
  .description('stop the gateway api server')
  .action(function(account, secret){
    console.log('stop the gateway api server');
  });

program
  .command('restart')
  .description('restart the gateway api server after update')
  .action(function(account, secret){
    console.log('restart the gateway api server');
  });

program
  .parse(process.argv);

