#!/usr/bin/env node
var program = require('commander');
var RippleWallet = require('../lib/rippleAddress').RippleWallet;

program
  .version('0.0.1')
  .option('-i, --issuer', 'specify an issuer other than the cold wallet')
  .option('-e, --env', 'specify the environment');

program
  .command('postgres:set <url>')
  .description('set the url of the postgres database')
  .action(function(){
    console.log('set the postgres url');
  });

program
  .command('postgres:get')
  .description('get the url of the postgres database')
  .action(function(cmd){
    console.log('get the ripple rest api url');
  });

program
  .command('ripple:rest:set <url>')
  .description('set the url of the ripple rest api')
  .action(function(){
    console.log('set the ripple rest api url');
  });

program
  .command('ripple:rest:get')
  .description('get the url of the ripple rest api')
  .action(function(cmd){
    console.log('get the ripple rest api url');
  });

program
  .command('wallet:set:hot <account> <secret>')
  .description('set the gateway hot wallet')
  .action(function(account, secret){
    /*
    var client = Ripple.client();
    client.hotWallet.set(account, secret, function(hotWallet){
      console.log(hotWallet)
    })
    */
    console.log('set the hot wallet');
  });

program
  .command('wallet:set:cold <type> <account> <secret>')
  .description('set the gateway hot wallet')
  .action(function(account, secret){
    /*
    var client = Ripple.client();
    client.hotWallet.set(account, secret, function(hotWallet){
      console.log(hotWallet)
    })
    */
    console.log('set the hot wallet');
  });

program
  .command('wallet:get:hot')
  .description('get the gateway hot wallet')
  .action(function(){
    /*
    var client = RippleGateway.client({ apiKey: 'password' });
    client.hotWallet.get(function(hotWallet) {
      console.log(hotWallet);
    });
    */
    console.log('get the hot wallet');
  });

program
  .command('wallet:get:cold')
  .description('get the gateway cold wallet')
  .action(function(){
    /*
    var client = RippleGateway.client({ apiKey: 'password' });
    client.coldWallet.get(function(wallet) {
      console.log(wallet);
    });
    */
    console.log('get the hot wallet');
  });

program
  .command('wallet:generate')
  .description('generate a random ripple wallet')
  .action(function(account, secret){
    var wallet = RippleWallet.generate();
    console.log(wallet);
  });

program
  .command('password:set')
  .description('set the admin password')
  .action(function(account, secret){
    console.log('set the admin password');
  });

program
  .command('password:get')
  .description('get the admin password')
  .action(function(account, secret){
    console.log('get the admin password');
  });

program
  .command('password:generate')
  .description('get the admin password')
  .action(function(account, secret){
    console.log('get the admin password');
  });

program
  .command('withdrawals:get')
  .description('get pending withdrawals to external accounts')
  .action(function(account, secret){
    console.log('get pending withdrawals');
  });

program
  .command('withdrawals:clear <external_transaction_id>')
  .description('clear pending withdrawal to external account')
  .action(function(account, secret){
    console.log('clear a pending withdrawal');
  });

program
  .command('deposit <external_account_id> <amount> <currency>')
  .description('deposit from an external account')
  .action(function(account, secret){
    console.log('deposit from an external account');
  });

program
  .command('currencies:add <currency> --issuer')
  .description('add support for a currency') 
  .action(function(account, secret){
    console.log('add support for a currency');
  });

program
  .command('currencies:remove <currency> --issuer')
  .description('remove support for a currency')
  .action(function(account, secret){
    console.log('add a curreny');
  });

program
  .command('currencies:get')
  .description('list currencies supported by the gateway')
  .action(function(account, secret){
    console.log('list all currencies supported');
  });

program
  .command('start')
  .description('start the gateway api server')
  .action(function(account, secret){
    console.log('start the gateway api server');
  });

program
  .command('stop')
  .description('stop the gateway api server')
  .action(function(account, secret){
    console.log('stop the gateway api server');
  });

program
  .command('restart')
  .description('restart the gateway api server after update')
  .action(function(account, secret){
    console.log('restart the gateway api server');
  });

program
  .parse(process.argv);

