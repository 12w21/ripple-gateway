#!/usr/bin/env node
var program = require('commander')

// Daemon

program
  .version('0.0.1')
  .option('-g, --global', 'specify all users rather than current user')
  .option('-p, --port', 'the port to bind the service')
  .option('-b, --bind', 'the host to bind the service')
  .option('-r, --restd', 'the url to the ripple restd')
  .option('-d, --daemon', 'run in the background')
  .option('-c, --config', 'path to the config file')
  .option('-gp, --group', 'user must belong to this group')
  .option('-c, --config', 'path to the config file');

program
  .command('start')
  .description('start the gateway api server');

// CLI 

program
  .command('set:paymentd <url>')
  .description('Set the url to paymentd');

program
  .command('set:restd <url>')
  .description('Set the url to restd');

program
  .command('set:account <account> [secret]')
  .description('Set the url to restd');

program
  .command('balance [account] [currency]')
  .description('no args = xrp balance. account = all balances. currency = limit currency.');

program
  .command('trust <account> <currency> <limit>')
  .flag('--setnoripple')
  .flag('--clearnoripple')
  .flag('--setauth')
  .option('--qualityin', 'UInt32')
  .option('--qualityout', 'UInt32')
  .description('Set the url to restd');

program
  .command('quote <account> <amount>')
  .description('Returns a cost estimate, not a path');

program
  .command('send <account> <amount> [max_amount] [submission_id]')
  .option('--dt', 'destination tag UInt32')
  .option('--invoiceid', 'invoice id sha256')
  .option('--paths', 'json object of paths')
  .flag('--nodirectripple', 'no direct ripple, no implicit path')
  .flag('--partialpayment', 'allow partial payment')
  .flag('--limitquality', 'limit quality of paths to minimum.');

program
  .command('pending')
  .option('--txid', 'specify the transaction id.')
  .option('--subid', 'specify the submission id.')
  .description('show the queue of payments to be retried');

program
  .command('cancel [submission_id]')
  .option('--txid', 'specify the transaction id.')
  .description('cancel retries of a transaction');

program
  .command('submit <transaction_json>')
  .description('send a transaction to the network. sign if unsigned');

program
  .command('data:sign <data>')
  .flag('--hex', 'convert from hex to binary before signing')
  .flag('--json', 'canonicalize and sign')
  .description('send a transaction to the network. sign if unsigned');

program
  .command('data:verify <data> <signature>')
  .flag('--hex', 'convert from hex to binary before signing')
  .flag('--json', 'canonicalize and sign')
  .description('send a transaction to the network. sign if unsigned');

program
  .command('data:encrypt <account> <data>')
  .flag('--hex', 'convert from hex to binary before signing')
  .flag('--json', 'canonicalize and sign')
  .description('encrypt data to the specified account');

program
  .command('data:decrypt <data>')
  .flag('--hex', 'convert from hex to binary before signing')
  .flag('--json', 'canonicalize and sign')
  .description('decrypt data sent to this account');

program
  .command('account:set')
  .option('--emailhash', 'given hash128 set email hash')
  .option('--emailgravar', 'given email address set email hash')
  .option('--domain', 'set the domain associated with the account')
  .option('--transferrate', 'set the transfer fee rate for the account')
  .option('--setflag', 'UInt32, normally decimal, if starts with 0x is hex')
  .option('--clearflag', 'UInt32')
  .flag('--dt');

program
  .parse(process.argv)

